package store

import (
	"errors"
	"sync"

	"gihtub.com/tasks-hub/users-service/internal/entities"
)

// InMemoryUserStore is a fictional implementation of UserStore using an in-memory database
type InMemoryUserStore struct {
	users map[int]*entities.User
	mu    sync.RWMutex
}

// NewInMemoryUserStore creates a new instance of InMemoryUserStore
func NewInMemoryUserStore() *InMemoryUserStore {
	return &InMemoryUserStore{
		users: make(map[int]*entities.User),
	}
}

// GetUserByID retrieves a user by ID from the in-memory database
func (u *InMemoryUserStore) GetUserByID(userID int) (*entities.User, error) {
	u.mu.RLock()
	defer u.mu.RUnlock()

	user, exists := u.users[userID]
	if !exists {
		return nil, errors.New("user not found")
	}

	return user, nil
}

// CreateUser creates a new user in the in-memory database
func (u *InMemoryUserStore) CreateUser(user *entities.User) error {
	u.mu.Lock()
	defer u.mu.Unlock()

	// Assign a new ID (in a real implementation, it could be generated by the database)
	user.ID = len(u.users) + 1
	u.users[user.ID] = user

	return nil
}
